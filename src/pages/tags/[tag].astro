---
interface Props {
    posts: MarkdownInstance<Record<string, any>>[];
}

import type { MarkdownInstance } from "astro";
import type { GetStaticPaths } from "astro";

export const getStaticPaths: GetStaticPaths = async () => {
    const allPosts = await Astro.glob("../posts/*.md");

    const uniqueTags = [
        ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
    ];

    return uniqueTags.map((tag) => {
        const filteredPosts = allPosts.filter((post) =>
            post.frontmatter.tags.includes(tag),
        );
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
};

import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";

const { tag } = Astro.params;
const { posts } = Astro.props;
const filteredPosts = posts.filter((post) =>
    post.frontmatter.tags?.includes(tag),
);
---

<BaseLayout pageTitle={tag}>
    <p>{tag}の記事一覧</p>
    <ul>
        {
            filteredPosts.map((post) => (
                <BlogPost url={post.url} title={post.frontmatter.title} />
            ))
        }
    </ul>
</BaseLayout>
